
Control_Juez_tutorial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae1  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073c  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035e  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000021aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  8e:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <conf_puertos>:



void conf_puertos(void)
{
	DDRB |= (1<<1);			// Salida de la señal a los LED infrarrojos 
  96:	21 9a       	sbi	0x04, 1	; 4
	
	DDRD &= ~(1<<0);		// Entrada Botón de RESET (comando)
  98:	50 98       	cbi	0x0a, 0	; 10
	DDRD &= ~(1<<1);		// Entrada Botón de GO (comando)
  9a:	51 98       	cbi	0x0a, 1	; 10
	DDRD &= ~(1<<3);		// Entrada botón de READY (comando)
  9c:	53 98       	cbi	0x0a, 3	; 10
  9e:	08 95       	ret

000000a0 <conf_timer1>:


void conf_timer1(void)
{
	//TCCR1A |= (1<<COM1A0);		// Salida del timer habilitada para CTC
	TCCR1B |= (1<<WGM12);		// Modo de operación #4 CTC (señal cuadrada)
  a0:	e1 e8       	ldi	r30, 0x81	; 129
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
	OCR1A =	104;				// TOP para generar  38khz
  aa:	88 e6       	ldi	r24, 0x68	; 104
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  b6:	08 95       	ret

000000b8 <ir_on>:
}

void ir_on(void)
{
	TCCR1A |= (1<<COM1A0);		// Salida del timer habilitada para CTC
  b8:	e0 e8       	ldi	r30, 0x80	; 128
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <ir_off>:
}

void ir_off(void)
{
	TCCR1A &= ~(1<<COM1A0);		// Salida del timer apagada para CTC
  c4:	e0 e8       	ldi	r30, 0x80	; 128
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8f 7b       	andi	r24, 0xBF	; 191
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <send_trama>:
}


void send_trama(int *trama)
{
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	8c 01       	movw	r16, r24
	ir_off();				//salida apagada
  da:	0e 94 62 00 	call	0xc4	; 0xc4 <ir_off>
  de:	e8 01       	movw	r28, r16
  e0:	0a 5d       	subi	r16, 0xDA	; 218
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for (int i=0; i<19; i++)
	{
		switch(trama[i])
  e4:	29 91       	ld	r18, Y+
  e6:	39 91       	ld	r19, Y+
  e8:	21 15       	cp	r18, r1
  ea:	31 05       	cpc	r19, r1
  ec:	21 f0       	breq	.+8      	; 0xf6 <send_trama+0x26>
  ee:	21 30       	cpi	r18, 0x01	; 1
  f0:	31 05       	cpc	r19, r1
  f2:	51 f0       	breq	.+20     	; 0x108 <send_trama+0x38>
  f4:	12 c0       	rjmp	.+36     	; 0x11a <send_trama+0x4a>
		{
			case 0: ir_on(); _delay_us(400); break;
  f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <ir_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e1       	ldi	r24, 0x1F	; 31
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <send_trama+0x2e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <send_trama+0x34>
 104:	00 00       	nop
 106:	0b c0       	rjmp	.+22     	; 0x11e <send_trama+0x4e>
			case 1: ir_off(); _delay_us(400); break;
 108:	0e 94 62 00 	call	0xc4	; 0xc4 <ir_off>
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <send_trama+0x40>
 114:	00 c0       	rjmp	.+0      	; 0x116 <send_trama+0x46>
 116:	00 00       	nop
 118:	02 c0       	rjmp	.+4      	; 0x11e <send_trama+0x4e>
			default: ir_off(); break;
 11a:	0e 94 62 00 	call	0xc4	; 0xc4 <ir_off>

void send_trama(int *trama)
{
	ir_off();				//salida apagada
	
	for (int i=0; i<19; i++)
 11e:	c0 17       	cp	r28, r16
 120:	d1 07       	cpc	r29, r17
 122:	01 f7       	brne	.-64     	; 0xe4 <send_trama+0x14>
			case 1: ir_off(); _delay_us(400); break;
			default: ir_off(); break;
		}
	}
	
	ir_off();
 124:	0e 94 62 00 	call	0xc4	; 0xc4 <ir_off>
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <main>:


int main(void)
{
	conf_puertos();		// Configuración de los puertos de entrada y salida
 132:	0e 94 4b 00 	call	0x96	; 0x96 <conf_puertos>
	conf_timer1();		// Mandamos llamar la funcion de configuración del timer
 136:	0e 94 50 00 	call	0xa0	; 0xa0 <conf_timer1>
	
	TCCR1B |= (1<<CS10);	// Habilita timer - > Prescalador de 1
 13a:	e1 e8       	ldi	r30, 0x81	; 129
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
	
	
    /* Replace with your application code */
    while (1) 
    {
		ir_off();
 144:	0e 94 62 00 	call	0xc4	; 0xc4 <ir_off>
		
		if ((PIND & (1<<0))==0)	//Leemos el boton de RESET (comando)
 148:	48 99       	sbic	0x09, 0	; 9
 14a:	31 c0       	rjmp	.+98     	; 0x1ae <main+0x7c>
		{
			DDRD |= (1<<2);
 14c:	52 9a       	sbi	0x0a, 2	; 10
			send_trama(RESET);
 14e:	8c e4       	ldi	r24, 0x4C	; 76
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 68 00 	call	0xd0	; 0xd0 <send_trama>
			//_delay_ms(64);				//agregamos un delay de 64 mili segundos
			PORTD &= ~(1<<2);
 156:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	8f e7       	ldi	r24, 0x7F	; 127
 15a:	9e e3       	ldi	r25, 0x3E	; 62
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x2a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x30>
 162:	00 00       	nop
			_delay_ms(8);
			PORTD |= (1<<2);
 164:	5a 9a       	sbi	0x0b, 2	; 11
 166:	8f e7       	ldi	r24, 0x7F	; 127
 168:	9e e3       	ldi	r25, 0x3E	; 62
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x38>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x3e>
 170:	00 00       	nop
			_delay_ms(8);
			PORTD &= ~(1<<2);
 172:	5a 98       	cbi	0x0b, 2	; 11
 174:	8f e7       	ldi	r24, 0x7F	; 127
 176:	9e e3       	ldi	r25, 0x3E	; 62
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x46>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x4c>
 17e:	00 00       	nop
			_delay_ms(8);
			PORTD |= (1<<2);
 180:	5a 9a       	sbi	0x0b, 2	; 11
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	9e e3       	ldi	r25, 0x3E	; 62
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x54>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x5a>
 18c:	00 00       	nop
			_delay_ms(8);
			PORTD &= ~(1<<2);
 18e:	5a 98       	cbi	0x0b, 2	; 11
 190:	8f e7       	ldi	r24, 0x7F	; 127
 192:	9e e3       	ldi	r25, 0x3E	; 62
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x62>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x68>
 19a:	00 00       	nop
			_delay_ms(8);
			PORTD |= (1<<2);
 19c:	5a 9a       	sbi	0x0b, 2	; 11
 19e:	8f e7       	ldi	r24, 0x7F	; 127
 1a0:	9e e3       	ldi	r25, 0x3E	; 62
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x70>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x76>
 1a8:	00 00       	nop
			_delay_ms(8);
			DDRD &= ~(1<<2);
 1aa:	52 98       	cbi	0x0a, 2	; 10
 1ac:	25 c0       	rjmp	.+74     	; 0x1f8 <main+0xc6>
		}
		else if((PIND & (1<<3))==0)	//Leemos el boton de READY (comando)
 1ae:	4b 99       	sbic	0x09, 3	; 9
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <main+0xa2>
		{
			DDRD |= (1<<2);
 1b2:	52 9a       	sbi	0x0a, 2	; 10
			send_trama(READY);
 1b4:	86 e2       	ldi	r24, 0x26	; 38
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 68 00 	call	0xd0	; 0xd0 <send_trama>
			PORTD |= (1<<2);
 1bc:	5a 9a       	sbi	0x0b, 2	; 11
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	2f e8       	ldi	r18, 0x8F	; 143
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	91 50       	subi	r25, 0x01	; 1
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x92>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x9c>
 1ce:	00 00       	nop
			_delay_ms(64);				//agregamos un delay de 64 mili segundos
			DDRD &= ~(1<<2);
 1d0:	52 98       	cbi	0x0a, 2	; 10
 1d2:	12 c0       	rjmp	.+36     	; 0x1f8 <main+0xc6>
		}
		else if((PIND & (1<<1))==0)	// leemos el botón de GO (comando)
 1d4:	49 99       	sbic	0x09, 1	; 9
 1d6:	10 c0       	rjmp	.+32     	; 0x1f8 <main+0xc6>
		{
			DDRD |= (1<<2);
 1d8:	52 9a       	sbi	0x0a, 2	; 10
			send_trama(GO);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 68 00 	call	0xd0	; 0xd0 <send_trama>
			PORTD &= ~(1<<2);
 1e2:	5a 98       	cbi	0x0b, 2	; 11
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	2f e8       	ldi	r18, 0x8F	; 143
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	91 50       	subi	r25, 0x01	; 1
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0xb8>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xc2>
 1f4:	00 00       	nop
			_delay_ms(64);				//agregamos un delay de 64 mili segundos
			DDRD &= ~(1<<2);
 1f6:	52 98       	cbi	0x0a, 2	; 10
		}
		
		ir_off();
 1f8:	0e 94 62 00 	call	0xc4	; 0xc4 <ir_off>
		
    }
 1fc:	a3 cf       	rjmp	.-186    	; 0x144 <main+0x12>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
